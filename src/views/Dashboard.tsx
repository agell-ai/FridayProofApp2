import React, { useMemo, useState } from 'react';
import { Edit, Users, FolderOpen, Wrench, TrendingUp, Activity, DollarSign, Clock, CheckCircle2, ArrowUp, ArrowDown, X } from 'lucide-react';
import StatsCard from '../components/Dashboard/StatsCard';
import { Card } from '../components/Shared/Card';
import { Button } from '../components/Shared/Button';
import { useAuth } from '../hooks/useAuth';

const availableWidgets = [
  {
    id: 'revenue',
    title: 'Revenue',
    value: '$48.2K',
    change: '+12% vs last month',
    icon: DollarSign,
    changeTone: 'positive' as const,
    description: 'Recognized revenue captured during the current billing cycle.',
  },
  {
    id: 'automationSavings',
    title: 'Automation Savings',
    value: '$128K',
    change: '+$12K captured',
    icon: Wrench,
    changeTone: 'positive' as const,
    description: 'Annualized savings generated by deployed AI and automation.',
  },
  {
    id: 'projects',
    title: 'In Delivery',
    value: '12',
    change: '+2 vs last week',
    icon: FolderOpen,
    changeTone: 'warning' as const,
    description: 'Client initiatives currently in execution or QA.',
  },
  {
    id: 'clients',
    title: 'Active Clients',
    value: '18',
    change: '+2 new accounts',
    icon: Users,
    changeTone: 'positive' as const,
    description: 'Accounts with active retainers or live projects.',
  },
  {
    id: 'pipeline',
    title: 'Pipeline Velocity',
    value: '21 days',
    change: '-3 days faster',
    icon: Clock,
    changeTone: 'positive' as const,
    description: 'Average time from project intake to go-live.',
  },
  {
    id: 'csat',
    title: 'Client Satisfaction',
    value: '4.8 / 5',
    change: '+0.1 above target',
    icon: TrendingUp,
    changeTone: 'positive' as const,
    description: 'Rolling 30-day CSAT score for all engagements.',
  },
];

const defaultWidgetOrder = ['revenue', 'automationSavings', 'projects', 'clients'];

const Dashboard: React.FC = () => {
  const { account } = useAuth();
  const [activeWidgetIds, setActiveWidgetIds] = useState<string[]>(defaultWidgetOrder);
  const [isCustomizeOpen, setIsCustomizeOpen] = useState(false);
  const [draftWidgets, setDraftWidgets] = useState<string[]>(defaultWidgetOrder);

  const activeWidgets = useMemo(
    () =>
      activeWidgetIds
        .map((id) => availableWidgets.find((widget) => widget.id === id))
        .filter(Boolean) as typeof availableWidgets,
    [activeWidgetIds]
  );

  const toggleDraftWidget = (id: string) => {
    setDraftWidgets((prev) =>
      prev.includes(id) ? prev.filter((widgetId) => widgetId !== id) : [...prev, id]
    );
  };

  const moveDraftWidget = (id: string, direction: 'up' | 'down') => {
    setDraftWidgets((prev) => {
      const index = prev.indexOf(id);
      if (index === -1) return prev;

      const newOrder = [...prev];
      const swapIndex = direction === 'up' ? index - 1 : index + 1;
      if (swapIndex < 0 || swapIndex >= newOrder.length) return prev;

      const temp = newOrder[swapIndex];
      newOrder[swapIndex] = id;
      newOrder[index] = temp;
      return newOrder;
    });
  };

  const openCustomize = () => {
    setDraftWidgets(activeWidgetIds);
    setIsCustomizeOpen(true);
  };

  const saveCustomization = () => {
    if (draftWidgets.length === 0) return;
    setActiveWidgetIds(draftWidgets);
    setIsCustomizeOpen(false);
  };

  const resetCustomization = () => {
    setDraftWidgets(defaultWidgetOrder);
  };

  const disableSave = draftWidgets.length === 0;

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-semibold text-[var(--fg)]">Overview</h1>
          <p className="text-sm text-[var(--fg-muted)]">
            {account ? `${account.name} Â· Performance snapshot` : 'Performance snapshot'}
          </p>
        </div>
        <Button onClick={openCustomize} glowOnHover innerClassName="font-semibold">
          <Edit className="w-4 h-4" />
          Customize
        </Button>
      </div>

      <div className="grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-4">
        {activeWidgets.map((widget) => (
          <StatsCard
            key={widget.id}
            title={widget.title}
            value={widget.value}
            change={widget.change}
            icon={widget.icon}
            changeTone={widget.changeTone}
          />
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="p-6">
          <div className="flex items-center justify-between mb-5">
            <h3 className="text-lg font-semibold text-[var(--fg)]">Recent Delivery</h3>
            <Activity className="w-4 h-4 text-[var(--fg-muted)]" />
          </div>
          <div className="space-y-3">
            {[{ name: 'E-commerce Automation', client: 'RetailMax Solutions', status: 'In Progress', tone: 'bg-sky-500/15 text-sky-600 dark:text-sky-300' }, { name: 'Customer Support AI', client: 'TechCorp Industries', status: 'Testing', tone: 'bg-purple-500/15 text-purple-600 dark:text-purple-300' }, { name: 'Invoice Processing', client: 'FinanceFlow Corp', status: 'Deployed', tone: 'bg-emerald-500/15 text-emerald-600 dark:text-emerald-300' }].map((project) => (
              <div
                key={project.name}
                className="flex items-center justify-between rounded-lg border border-[var(--border)] bg-[var(--surface)]/60 px-4 py-3"
              >
                <div>
                  <p className="text-sm font-semibold text-[var(--fg)]">{project.name}</p>
                  <p className="text-xs text-[var(--fg-muted)]">{project.client}</p>
                </div>
                <span className={`rounded-full px-2 py-1 text-[10px] font-medium ${project.tone}`}>
                  {project.status}
                </span>
              </div>
            ))}
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center justify-between mb-5">
            <h3 className="text-lg font-semibold text-[var(--fg)]">Operational Health</h3>
            <TrendingUp className="w-4 h-4 text-[var(--fg-muted)]" />
          </div>
          <div className="grid grid-cols-1 gap-4">
            <div className="flex items-center justify-between">
              <span className="text-sm text-[var(--fg-muted)]">System uptime</span>
              <span className="text-sm font-semibold text-emerald-600 dark:text-emerald-300">99.8%</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-[var(--fg-muted)]">Average response time</span>
              <span className="text-sm font-semibold text-[var(--fg)]">1.2s</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-[var(--fg-muted)]">Automation success</span>
              <span className="text-sm font-semibold text-emerald-600 dark:text-emerald-300">96%</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-[var(--fg-muted)]">Escalations this week</span>
              <span className="text-sm font-semibold text-amber-600 dark:text-amber-300">2</span>
            </div>
          </div>
        </Card>
      </div>

      <Card className="p-6">
        <h3 className="text-lg font-semibold text-[var(--fg)] mb-4">Quick Actions</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[{ title: 'New Project', description: 'Kick off a fresh automation initiative.', icon: FolderOpen, accent: 'text-sky-600 dark:text-sky-300' }, { title: 'Add Team Member', description: 'Invite a collaborator or contractor.', icon: Users, accent: 'text-emerald-600 dark:text-emerald-300' }, { title: 'Deploy Tool', description: 'Launch a new agent or workflow.', icon: Wrench, accent: 'text-purple-600 dark:text-purple-300' }, { title: 'Schedule Review', description: 'Book a client strategy session.', icon: CheckCircle2, accent: 'text-orange-600 dark:text-orange-300' }].map((action) => (
            <button
              key={action.title}
              type="button"
              className="rounded-lg border border-[var(--border)] bg-[var(--surface)]/60 px-4 py-3 text-left transition hover:-translate-y-0.5 hover:shadow-sm"
            >
              <action.icon className={`mb-2 h-5 w-5 ${action.accent}`} />
              <p className="text-sm font-semibold text-[var(--fg)]">{action.title}</p>
              <p className="text-xs text-[var(--fg-muted)]">{action.description}</p>
            </button>
          ))}
        </div>
      </Card>

      {isCustomizeOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-[var(--fg)]/10 backdrop-blur-sm p-4">
          <div className="w-full max-w-2xl rounded-2xl border border-[var(--border)] bg-[var(--card)] shadow-xl max-h-[90vh] overflow-hidden flex flex-col">
            <div className="flex items-center justify-between border-b border-[var(--border)] bg-[var(--surface)]/40 px-6 py-4">
              <div>
                <h2 className="text-lg font-semibold text-[var(--fg)]">Customize dashboard</h2>
                <p className="text-sm text-[var(--fg-muted)]">Choose which metrics appear at the top of the overview.</p>
              </div>
              <button
                type="button"
                onClick={() => setIsCustomizeOpen(false)}
                className="rounded-full p-2 text-[var(--fg-muted)] hover:text-[var(--fg)] hover:bg-[var(--surface)]"
                aria-label="Close customization"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            <div className="flex-1 space-y-3 overflow-y-auto px-6 py-5">
              {availableWidgets.map((widget) => {
                const isSelected = draftWidgets.includes(widget.id);
                const index = draftWidgets.indexOf(widget.id);
                return (
                  <div
                    key={widget.id}
                    className="flex items-center justify-between gap-3 rounded-lg border border-[var(--border)] bg-[var(--surface)]/60 px-4 py-3"
                  >
                    <div className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => toggleDraftWidget(widget.id)}
                        className="h-4 w-4 rounded border-[var(--border)] text-[var(--accent-orange)] focus:ring-[var(--accent-purple)]"
                      />
                      <div>
                        <p className="text-sm font-semibold text-[var(--fg)]">{widget.title}</p>
                        <p className="text-xs text-[var(--fg-muted)]">{widget.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <button
                        type="button"
                        onClick={() => moveDraftWidget(widget.id, 'up')}
                        disabled={!isSelected || index === 0}
                        className="rounded-full border border-[var(--border)] p-2 text-[var(--fg-muted)] hover:text-[var(--fg)] disabled:opacity-40"
                        aria-label="Move up"
                      >
                        <ArrowUp className="w-4 h-4" />
                      </button>
                      <button
                        type="button"
                        onClick={() => moveDraftWidget(widget.id, 'down')}
                        disabled={!isSelected || index === draftWidgets.length - 1}
                        className="rounded-full border border-[var(--border)] p-2 text-[var(--fg-muted)] hover:text-[var(--fg)] disabled:opacity-40"
                        aria-label="Move down"
                      >
                        <ArrowDown className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>

            <div className="flex items-center justify-between border-t border-[var(--border)] bg-[var(--surface)]/40 px-6 py-4">
              <button
                type="button"
                onClick={resetCustomization}
                className="text-sm text-[var(--fg-muted)] hover:text-[var(--fg)]"
              >
                Reset to default
              </button>
              <div className="flex items-center gap-3">
                <button
                  type="button"
                  onClick={() => setIsCustomizeOpen(false)}
                  className="rounded-lg border border-[var(--border)] px-4 py-2 text-sm text-[var(--fg)] hover:bg-[var(--surface)]"
                >
                  Cancel
                </button>
                <Button
                  type="button"
                  onClick={saveCustomization}
                  disabled={disableSave}
                  glowOnHover
                  innerClassName="font-semibold"
                >
                  Save layout
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;